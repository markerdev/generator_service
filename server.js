
require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const { generateFacadeImages } = require('./services/geminiService');
const { sendResultsEmail } = require('./services/emailService');
const { uploadFile, generateV4ReadSignedUrl } = require('./services/storageService');

const app = express();
const port = process.env.PORT || 3001;

// --- CORS Configuration ---
const allowedOrigins = [
    process.env.FRONTEND_URL,
    'http://localhost:3000',
    'http://localhost:8000'
].filter(Boolean);

if (allowedOrigins.length === 0 && process.env.NODE_ENV === 'production') {
    console.error('\x1b[31m%s\x1b[0m', 'FATAL: FRONTEND_URL environment variable is not set in production. CORS will block all requests.');
} else {
    console.log('Allowed CORS origins:', allowedOrigins);
}

const corsOptions = {
  origin: allowedOrigins,
  methods: 'POST',
  allowedHeaders: 'Content-Type',
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));
app.use(express.json());

// Multer setup for handling file uploads in memory
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const uploadFields = [
    { name: 'facadeImage', maxCount: 1 },
    { name: 'balconyImage', maxCount: 1 }
];

app.post('/generate-images', upload.fields(uploadFields), async (req, res) => {
    try {
        console.log('Received request to /generate-images');

        const { email, modernizationChoices, facadeColor, railingMaterial } = req.body;
        const facadeImageFile = req.files.facadeImage ? req.files.facadeImage[0] : null;
        const balconyImageFile = req.files.balconyImage ? req.files.balconyImage[0] : null;

        if (!facadeImageFile || !email) {
            return res.status(400).json({ message: 'Facade image and email are required.' });
        }
        
        // --- Start of synchronous processing ---
        console.log(`Starting synchronous processing for ${email}`);
        const parsedModernizationChoices = JSON.parse(modernizationChoices);
        
        const facadeBase64 = facadeImageFile.buffer.toString('base64');
        const facadeMimeType = facadeImageFile.mimetype;

        let balconyBase64 = null;
        let balconyMimeType = null;
        if (balconyImageFile) {
            balconyBase64 = balconyImageFile.buffer.toString('base64');
            balconyMimeType = balconyImageFile.mimetype;
        }

        const { glazedImage, modernizedImage, cozyBalconyImage } = await generateFacadeImages(
            facadeBase64,
            facadeMimeType,
            parsedModernizationChoices,
            facadeColor,
            railingMaterial,
            balconyBase64,
            balconyMimeType
        );

        console.log('Images generated by AI.');

        // Upload an image to GCS and get a temporary signed URL for it
        const uploadAndGetSignedUrl = async (base64Data, namePrefix) => {
            if (!base64Data) return null;
            const fileName = `${namePrefix}-${Date.now()}.png`;
            const imageBuffer = Buffer.from(base64Data, 'base64');
            
            await uploadFile(imageBuffer, fileName);
            console.log(`Image uploaded to GCS: ${fileName}`);

            const signedUrl = await generateV4ReadSignedUrl(fileName);
            return signedUrl;
        };

        // Run uploads in parallel for better performance
        const urlPromises = [
            uploadAndGetSignedUrl(glazedImage, 'glazed'),
            uploadAndGetSignedUrl(modernizedImage, 'modernized'),
            uploadAndGetSignedUrl(cozyBalconyImage, 'cozy')
        ];
        
        const resolvedUrls = await Promise.all(urlPromises);
        const downloadUrls = resolvedUrls.filter(Boolean); // Filter out any null results if an image wasn't generated
        
        console.log('Generated download URLs from GCS:', downloadUrls);
        
        // Respond to the client with the URLs
        res.status(200).json({ urls: downloadUrls });
        
        // --- Start background task for sending email ---
        if (downloadUrls.length > 0) {
            sendResultsEmail(email, downloadUrls)
                .then(() => console.log(`Successfully sent email to ${email} in the background.`))
                .catch(err => console.error(`Failed to send email to ${email} in the background:`, err));
        } else {
            console.warn(`No images were generated or uploaded for ${email}. No email will be sent.`);
        }
        // --- End background task ---

    } catch (error) {
        console.error('Error in /generate-images endpoint:', error);
        // Ensure a response is sent even on error, forwarding the Gemini service message if available.
        res.status(500).json({ message: error.message || 'An internal server error occurred during image generation.' });
    }
});

app.get('/', (req, res) => {
    res.send('AI Balcony Glazing Backend is running.');
});

app.listen(port, () => {
    console.log(`Server listening on port ${port}. Make sure there are no errors above this line.`);
    console.log(`Backend is ready for requests. Images will be uploaded to Google Cloud Storage.`);
});
