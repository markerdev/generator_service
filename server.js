
require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const { generateFacadeImages } = require('./services/geminiService');
const { sendResultsEmail } = require('./services/emailService');

const app = express();
const port = process.env.PORT || 3001; // cPanel will provide the PORT
const BACKEND_URL = process.env.BACKEND_URL || `http://localhost:${port}`;
const FRONTEND_URL = process.env.FRONTEND_URL; // The URL of your deployed frontend

// Create a directory for generated images if it doesn't exist
const imagesDir = path.join(__dirname, 'public', 'generated-images');
if (!fs.existsSync(imagesDir)) {
    fs.mkdirSync(imagesDir, { recursive: true });
    console.log(`Created directory for images: ${imagesDir}`);
}

// --- Production CORS Configuration ---
const corsOptions = {
  origin: FRONTEND_URL,
  optionsSuccessStatus: 200 // For legacy browser support
};

if (!FRONTEND_URL) {
    console.warn('!!! WARNING: FRONTEND_URL environment variable not set. CORS might block frontend requests.');
}

app.use(cors(corsOptions));
app.options('*', cors(corsOptions));


// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

app.use(express.json());

// Multer setup for handling file uploads in memory
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const uploadFields = [
    { name: 'facadeImage', maxCount: 1 },
    { name: 'balconyImage', maxCount: 1 }
];

app.post('/generate-images', upload.fields(uploadFields), async (req, res) => {
    try {
        console.log('Received request to /generate-images');

        const { email, modernizationChoices, facadeColor, railingMaterial } = req.body;
        const facadeImageFile = req.files.facadeImage ? req.files.facadeImage[0] : null;
        const balconyImageFile = req.files.balconyImage ? req.files.balconyImage[0] : null;

        if (!facadeImageFile || !email) {
            return res.status(400).json({ message: 'Facade image and email are required.' });
        }
        
        const imageUrls = await processRequest(email, facadeImageFile, balconyImageFile, modernizationChoices, facadeColor, railingMaterial);
        
        res.status(200).json({ imageUrls });

    } catch (error) {
        console.error('Error in /generate-images endpoint:', error);
        res.status(500).json({ message: error.message || 'An internal server error occurred during image generation.' });
    }
});

const processRequest = async (email, facadeImageFile, balconyImageFile, modernizationChoices, facadeColor, railingMaterial) => {
    try {
        console.log(`Starting sync processing for ${email}`);
        const parsedModernizationChoices = JSON.parse(modernizationChoices);
        
        const facadeBase64 = facadeImageFile.buffer.toString('base64');
        const facadeMimeType = facadeImageFile.mimetype;

        let balconyBase64 = null;
        let balconyMimeType = null;
        if (balconyImageFile) {
            balconyBase64 = balconyImageFile.buffer.toString('base64');
            balconyMimeType = balconyImageFile.mimetype;
        }

        const { glazedImage, modernizedImage, cozyBalconyImage } = await generateFacadeImages(
            facadeBase64,
            facadeMimeType,
            parsedModernizationChoices,
            facadeColor,
            railingMaterial,
            balconyBase64,
            balconyMimeType
        );

        console.log('Images generated by AI.');

        const saveImageAndGetUrl = (base64Data, namePrefix) => {
            if (!base64Data) return null;
            const fileName = `${namePrefix}-${Date.now()}.png`;
            const filePath = path.join(imagesDir, fileName);
            fs.writeFileSync(filePath, Buffer.from(base64Data, 'base64'));
            const imageUrl = `${BACKEND_URL}/generated-images/${fileName}`;
            console.log(`Image saved locally: ${filePath}`);
            return {
                url: imageUrl,
                type: namePrefix
            };
        };

        const glazedResult = saveImageAndGetUrl(glazedImage, 'glazed');
        const modernizedResult = saveImageAndGetUrl(modernizedImage, 'modernized');
        const cozyResult = saveImageAndGetUrl(cozyBalconyImage, 'cozy');

        const finalUrls = [glazedResult, modernizedResult, cozyResult].filter(Boolean); // Filter out nulls
        
        console.log('Generated image URLs:', finalUrls);
        
        // Send email in the background, no need to wait for it
        sendResultsEmail(email, finalUrls.map(u => u.url)).catch(err => {
             console.error(`Failed to send email to ${email} in background:`, err);
        });
        
        console.log(`Successfully processed request for ${email}`);
        return finalUrls;

    } catch (error) {
        console.error(`Failed to process request for ${email}:`, error);
        throw error; // Re-throw to be caught by the endpoint handler
    }
};

app.get('/', (req, res) => {
    res.send('AI Balcony Glazing Backend is running.');
});

app.listen(port, () => {
    console.log(`Server listening on port ${port}. Make sure there are no errors above this line.`);
    console.log('CORS is enabled. The backend is ready for requests from the frontend.');
});
