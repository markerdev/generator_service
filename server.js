
require('dotenv').config();
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const { generateFacadeImages } = require('./services/geminiService');
const { sendResultsEmail } = require('./services/emailService');

const app = express();
const port = process.env.PORT || 3001;
const BASE_URL = process.env.BASE_URL || `http://localhost:${port}`;

// Create a directory for generated images if it doesn't exist
const imagesDir = path.join(__dirname, 'public', 'generated-images');
if (!fs.existsSync(imagesDir)) {
    fs.mkdirSync(imagesDir, { recursive: true });
    console.log(`Created directory for images: ${imagesDir}`);
}

// --- CORS Configuration ---
// Whitelist the frontend origin from environment variables for security and flexibility.
const allowedOrigins = [
    // Production frontend URL
    process.env.FRONTEND_URL,
    // Add localhost for local development if needed
    'http://localhost:3000', // Example for a common local dev server
    'http://localhost:8000'
].filter(Boolean); // .filter(Boolean) removes any undefined/null entries

console.log('Allowed CORS origins:', allowedOrigins);

const corsOptions = {
  origin: function (origin, callback) {
    // Allow requests with no origin (like mobile apps or curl requests) and whitelisted origins
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.warn(`CORS: Request from origin '${origin}' was blocked.`);
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: 'POST',
  allowedHeaders: 'Content-Type',
};

// Enable CORS with the specified options.
// app.options is for pre-flight requests.
app.use(cors(corsOptions));
app.options('/generate-images', cors(corsOptions)); // Specifically handle pre-flight for your main endpoint


// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

app.use(express.json());

// Multer setup for handling file uploads in memory
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const uploadFields = [
    { name: 'facadeImage', maxCount: 1 },
    { name: 'balconyImage', maxCount: 1 }
];

app.post('/generate-images', upload.fields(uploadFields), async (req, res) => {
    try {
        console.log('Received request to /generate-images');

        const { email, modernizationChoices, facadeColor, railingMaterial } = req.body;
        const facadeImageFile = req.files.facadeImage ? req.files.facadeImage[0] : null;
        const balconyImageFile = req.files.balconyImage ? req.files.balconyImage[0] : null;

        if (!facadeImageFile || !email) {
            return res.status(400).json({ message: 'Facade image and email are required.' });
        }
        
        res.status(202).json({ message: 'Processing started. Results will be sent to your email.' });
        
        // Process the request in the background without holding up the response
        processRequest(email, facadeImageFile, balconyImageFile, modernizationChoices, facadeColor, railingMaterial).catch(err => {
            console.error(`Unhandled error in background processing for ${email}:`, err);
            // Optional: Send an error notification email to an admin
        });

    } catch (error) {
        console.error('Error in /generate-images endpoint:', error);
        // This will likely only catch synchronous errors before the background processing starts
    }
});

const processRequest = async (email, facadeImageFile, balconyImageFile, modernizationChoices, facadeColor, railingMaterial) => {
    try {
        console.log(`Starting async processing for ${email}`);
        const parsedModernizationChoices = JSON.parse(modernizationChoices);
        
        const facadeBase64 = facadeImageFile.buffer.toString('base64');
        const facadeMimeType = facadeImageFile.mimetype;

        let balconyBase64 = null;
        let balconyMimeType = null;
        if (balconyImageFile) {
            balconyBase64 = balconyImageFile.buffer.toString('base64');
            balconyMimeType = balconyImageFile.mimetype;
        }

        const { glazedImage, modernizedImage, cozyBalconyImage } = await generateFacadeImages(
            facadeBase64,
            facadeMimeType,
            parsedModernizationChoices,
            facadeColor,
            railingMaterial,
            balconyBase64,
            balconyMimeType
        );

        console.log('Images generated by AI.');

        const downloadUrls = [];
        const saveImageAndGetUrl = (base64Data, namePrefix) => {
            if (!base64Data) return;
            const fileName = `${namePrefix}-${Date.now()}.png`;
            const filePath = path.join(imagesDir, fileName);
            fs.writeFileSync(filePath, Buffer.from(base64Data, 'base64'));
            const imageUrl = `${BASE_URL}/generated-images/${fileName}`;
            downloadUrls.push(imageUrl);
            console.log(`Image saved locally: ${filePath}`);
        };

        saveImageAndGetUrl(glazedImage, 'glazed');
        saveImageAndGetUrl(modernizedImage, 'modernized');
        saveImageAndGetUrl(cozyBalconyImage, 'cozy');
        
        console.log('Generated download URLs:', downloadUrls);
        
        await sendResultsEmail(email, downloadUrls);
        console.log(`Successfully processed and sent email to ${email}`);

    } catch (error) {
        console.error(`Failed to process request for ${email}:`, error);
        // Optional: Send a failure notification email to the user
    }
};

app.get('/', (req, res) => {
    res.send('AI Balcony Glazing Backend is running.');
});

app.listen(port, () => {
    console.log(`Server listening on port ${port}. Make sure there are no errors above this line.`);
    if (process.env.NODE_ENV === 'production' && (!process.env.BASE_URL || process.env.BASE_URL.includes('localhost'))) {
        console.warn('\x1b[33m%s\x1b[0m', 'WARNING: Running in production mode but BASE_URL is not set or is set to localhost. Email links may be incorrect.');
    } else {
        console.log(`Backend is ready for requests. Public base URL for images is: ${BASE_URL}`);
    }
});
